DONE
Annotations improvements
    * restricted child and link annotations to fields only
    * added link annotation

NOW
    improve object model
        root - compiler
        children:
            errors - list of errors / exceptions
            tasks - tree of tasks
            entities - tree of entities

    new type of compiler explorer - list based
        use reflection based on annotations to access nodes
        will support keyboard shortcuts:
            up/down arrows - move between items in current node
            backspace - move to parent node
            context menu button - show context menu for item
            right/left arrow - show / hide children of selected node
            enter - move to selected node

        will have top panel with current path
            delimiter will be probably slash

        will have check box - show hidden objects (any unannotated fields)

SOON
    ...


LATER
    resolver
        first has to resolve stamps, then other
        aliases has to be stored somehow, or searched by context

        maybe separate step in resolver to fill in context entities ???
            that would require re-creating context for each entity ...
            better would be remporary context object that would be filled with all possible entity links
            but links can be created not only with name ... operators too, and depends on input parameters too

    test
        types.mg - define all required operators in test file

    language
        add option to specify target mg language version
            file based
            project based

        templates !!! or collections ... !
        exceptions - type for buildin, SAVEPOINT/TRY, CATCH, ROLLBACK, ...

        compilation
            build stamp definitions

        aggregation as clever pointers
            option to track normal pointers too in debug mode

        automatické volání konstruktorů destruktorů ???
            kdy a jak?

        modules
        custom stamps definitions

    translator to c/cpp

    compiler
        add healing spots
            not only separating compilation of each line
            but also a part until which line is correct and after which is errorneous
                process line only up until the point where is correct
                automatically close all brackets and other groups
            do not add more errors if (probably current task?) already has some
                because the new ones are most probably caused by the previous ones

OPTIONAL
    language
        an idea - class could be location at the same time
            this could allow to place "inner" classes and functions in separate files
            on filesystem level, it could be solved as a folder with the same name as the class (without the extension)


